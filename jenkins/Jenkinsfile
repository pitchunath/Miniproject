  def NEXUS_VERSION = "nexus3"
      def  NEXUS_PROTOCOL = "http"
       def NEXUS_URL = "http://20.50.16.180:8081"
       def NEXUS_REPOSITORY = "nexusproject"
       def NEXUS_CREDENTIAL_ID = "nexusnew1"
      
node{
   
        stage('Checkout'){
           git 'https://github.com/pitchunath/Miniproject.git'
          } 
          
        
        stage('Build') {
             def mavenHome = tool name: 'maven 3.6.3' , type: 'maven'
                            sh "${mavenHome}/bin/mvn clean package"
                       }
    
        stage('SonarQube Analysis'){
            def mavenHome = tool name: 'maven 3.6.3' , type: 'maven'
            withSonarQubeEnv('sonar'){
               sh "${mavenHome}/bin/mvn sonar:sonar -Dsonar.projectKey=sonar -Dsonar.host.url=http://51.124.54.246:9000  -Dsonar.login=4f9cbd48f5d6bf459d38dcd90cf21ad71266be2b"
            }
         }
    
        stage("Publish to nexus") {
                script {
                    // Read POM xml file using 'readMavenPom' step , this step 'readMavenPom' is included in: https://plugins.jenkins.io/pipeline-utility-steps
                    pom = readMavenPom file: "pom.xml";
                    // Find built artifact under target folder
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                    // Print some info from the artifact found
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    // Extract the path from the File found
                    artifactPath = filesByGlob[0].path;
                    // Assign to a boolean response verifying If the artifact name exists
                    artifactExists = fileExists artifactPath;
                    if(artifactExists) {
                        echo "* File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            version: pom.version,
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                // Artifact generated such as .jar, .ear and .war files.
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging],
                                // Lets upload the pom.xml
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: "pom.xml",
                                type: "xml"]
                            ]
                        );
                    } else {
                                 error "* File: ${artifactPath}, could not be found";
                    }
                }
          
   
}
}
